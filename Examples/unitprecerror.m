//printf "%m \n", K;
AttachSpec("../Gm-Reduce/spec");
SetDebugOnError(true);
K<nu>:=ext<K|Polynomial(K, [400, -160, 1640, 864, 568, 232, 298, -152, 103, -24, 14, -4, 1])> where K is RationalField();
Rtx<t,x>:= PolynomialRing(K,2);


d := 7;
i := 6;
G := TransitiveGroup(d,i);
sigmas := [[Sym(7) | [3, 1, 4, 5, 6, 7, 2], [4, 2, 7, 1, 3, 5, 6], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [2, 3, 5, 6, 4, 7, 1], [3, 7, 1, 2, 5, 4, 6], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [2, 4, 5, 3, 6, 7, 1], [3, 7, 1, 4, 2, 5, 6], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [3, 4, 2, 5, 6, 7, 1], [4, 7, 3, 1, 2, 5, 6], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [7, 4, 2, 6, 1, 5, 3], [6, 5, 3, 7, 2, 4, 1], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [3, 6, 2, 5, 7, 4, 1], [4, 7, 3, 1, 6, 2, 5], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [4, 7, 5, 3, 6, 2, 1], [3, 7, 6, 4, 1, 5, 2], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [3, 5, 6, 7, 4, 2, 1], [2, 7, 6, 1, 5, 3, 4], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [4, 6, 2, 5, 7, 1, 3], [4, 6, 3, 7, 1, 2, 5], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [3, 5, 2, 6, 7, 1, 4], [2, 6, 3, 1, 7, 4, 5], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [7, 5, 2, 1, 6, 4, 3], [2, 4, 3, 7, 6, 5, 1], [2, 3, 4, 5, 1, 6, 7]], [Sym(7) | [7, 3, 1, 6, 4, 2, 5], [7, 3, 6, 2, 5, 4, 1], [2, 3, 4, 5, 1, 6, 7]]];

f_padic:=1/144900*(-7205925227*nu^11 + 7261024694*nu^10 - 34957277400*nu^9 + 54212510768*nu^8 - 374976761405*nu^7 - 218345025186*nu^6 - 631206950488*nu^5 - 730040361800*nu^4 - 443099946936*nu^3 + 959704774000*nu^2 - 335322119560*nu + 239682922800)*t^2 + 1/165600*(-563489307*nu^11 + 2154317864*nu^10 - 7378348640*nu^9 + 11805767088*nu^8 - 54740499245*nu^7 + 74876093804*nu^6 - 144545731368*nu^5 - 170741048600*nu^4 - 316981970536*nu^3 - 500842754640*nu^2 - 936797490760*nu + 56401986400)*t*x^3 + 1/2318400*(641411931*nu^11 - 2709017102*nu^10 + 8732025920*nu^9 - 15206445024*nu^8 + 64094560205*nu^7 - 99838297142*nu^6 + 159937110384*nu^5 + 150914171480*nu^4 + 300092279608*nu^3 + 486631178880*nu^2 + 990314989480*nu - 191412137200)*t*x^2 + 1/1159200*(-91137159*nu^11 + 363252643*nu^10 - 583121620*nu^9 + 1965000456*nu^8 - 6158250865*nu^7 + 10808745433*nu^6 + 6781334904*nu^5 + 23222583320*nu^4 + 40335004048*nu^3 + 55947349080*nu^2 - 11876242520*nu + 19470501800)*t*x + 1/2318400*(102734891*nu^11 - 162467892*nu^10 + 518349880*nu^9 - 1047056864*nu^8 + 5606136285*nu^7 + 212028608*nu^6 + 5276725504*nu^5 + 2683592040*nu^4 - 4922902552*nu^3 - 25011224560*nu^2 + 4784519880*nu - 6415409600)*t + 1/1159200*(35702897850464708111*nu^11 - 167336194794830651427*nu^10 + 411777408731741729140*nu^9 + 172521764561999738056*nu^8 - 1114482396571004545335*nu^7 + 2662818386789179247063*nu^6 + 2131617325970266821064*nu^5 + 3546796717308218682600*nu^4 + 11537261906441454696368*nu^3 + 13960898552941568433800*nu^2 - 713015898655224553320*nu + 3674545435228647923800)*x^7 + 1/2318400*(-73777311731389673*nu^11 - 701942472058461544*nu^10 + 5921633211657981960*nu^9 - 24475952063025494368*nu^8 + 40102993326240488305*nu^7 - 39971696315227575804*nu^6 - 21292003346413218592*nu^5 - 39872893344756880280*nu^4 - 70090835670866621784*nu^3 - 285228242979806593040*nu^2 + 47392349858771921960*nu - 68271910290072122400)*x^6 + 1/1159200*(-376999327811337*nu^11 + 2541085998925004*nu^10 - 9352038777717320*nu^9 + 15999035352499248*nu^8 - 16160135269827935*nu^7 - 2651035018190896*nu^6 - 10029236111786928*nu^5 - 13408201660014920*nu^4 - 87653179363268056*nu^3 + 42012244927878960*nu^2 - 26400088813183960*nu + 6033274873801600)*x^5;

sigma:=sigmas[1];
sigma_p:=S3Action(Sym(3)!(1,3), sigma);
S3Action(Sym(3)!(1,2,3), sigma);

reducemodel_units(f_padic : prec:=10);

UK, mUK := UnitGroup(Integers(K));
us := [mUK(UK.i) : i in [-6..6]];

rescale := function(f);
  letmeout := false;
  w0 := 1;
  repeat
    S := [];
    oldlen := #Sprint(f);
    for w in us do
      Append(~S, <#Sprint(f*w), w>);
    end for;
    Sort(~S);
    if S[1][1] lt oldlen then
      // print oldlen, S[1];
      oldlen := S[1][1];
      f *:= S[1][2];
      w0 *:= S[1][2];
    else
      letmeout := true;
    end if;
  until letmeout;
  return f, w0;
end function;

yepdone := false;
u0 := 1;
v0 := 1;
w0 := 1;
repeat
  oldlen := #Sprint(f_padic);
  S := [];
  for u,v,w in us do
    Append(~S, <#Sprint(Evaluate(f_padic,[u*t,v*x])*w), [u,v,w]>);
  end for;
  Sort(~S);
  if S[1][1] lt oldlen then
    print oldlen, S[1];
    oldlen := S[1][1];
    u,v,w := Explode(S[1][2]);
    f_padic := Evaluate(f_padic,[u*t,v*x])*w;
    u0 *:= u;
    v0 *:= v;
    w0 *:= w;
  else
    yepdone := true;
  end if;
until yepdone;
